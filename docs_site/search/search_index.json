{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"primeight is a Python package designed to make the powerful NoSQL Cassandra database system easily available to everyone. We had two major objectives in mind: encapsulate its partition system with a very easy interface, and enforce Cassandra best practices by defining queries for tables Additionally we added other proxies to convenient operations such as creation, management, and drop of keyspaces, tables and/or materialized views. primeight came to life from the necessity to create a standard at Meight Engineering when interacting with Cassandra. We recognised that when dealing with IOT Time Series data there are typically 3 dimensions to partition it: by time , space , and/or identifier . primeight tries to make the most of Cassandra core ideas, like Query-driven modelling and partitions to optimise for speed, while making available one of the most powerful database technologies to the Python community! Info primeight is still in beta, as well as this documentation. If you find anything that you believe is incorrect please feel free to open an issue or open a pull request. Installation \u00b6 pip install primeight Example \u00b6 This example demonstrates the most important tasks. We will be using the following devices.yaml configuration file. version : '1.0.0' name : 'devices' keyspace : 'meight' columns : device_id : type : uuid ts : type : timestamp generated_columns : day : ts query : base : required : id : device_id optional : - day order : day : desc Load table configuration \u00b6 from primeight.parser import YamlParser config = YamlParser . parse ( 'devices.yaml' ) Create connection \u00b6 from primeight import CassandraManager manager = CassandraManager ([ '127.0.0.1' ]) manager . connect () Create keyspace \u00b6 from primeight import CassandraKeyspace keyspace = CassandraKeyspace ( config , cassandra_manager = manager ) keyspace . create () Create table \u00b6 from primeight import CassandraTable table = CassandraTable ( config , cassandra_manager = manager ) table . create () Insert data \u00b6 table . insert ({ 'device_id' : '659b6222-19fb-416e-9aa5-9df8cf679247' , 'ts' : 1592491059984 }) . execute () Query data \u00b6 rows = \\ table \\ . query ( 'base' ) \\ . id ( '659b6222-19fb-416e-9aa5-9df8cf679247' ) \\ . execute () Recap \u00b6 from primeight.parser import YamlParser from primeight import CassandraManager , CassandraKeyspace , CassandraTable # Load configuration. config = YamlParser . parse ( 'devices.yaml' ) # Connect to Cassandra cluster. manager = CassandraManager ([ '127.0.0.1' ]) manager . connect () # Create Keyspace and table. keyspace = CassandraKeyspace ( config , cassandra_manager = manager ) table = CassandraTable ( config , cassandra_manager = manager ) keyspace . create () . execute () table . create () . execute () # Insert line into table. table . insert ({ 'device_id' : '659b6222-19fb-416e-9aa5-9df8cf679247' , 'ts' : 1592491059984 }) . execute () # Query table. rows = \\ table \\ . query ( 'base' ) \\ . id ( '659b6222-19fb-416e-9aa5-9df8cf679247' ) \\ . execute () n_rows = len ( rows ) print ( f \"Queried { len ( rows ) } rows\" ) License \u00b6 This project is licensed under the terms of the Apache License 2.0 license.","title":"Primeight"},{"location":"#installation","text":"pip install primeight","title":"Installation"},{"location":"#example","text":"This example demonstrates the most important tasks. We will be using the following devices.yaml configuration file. version : '1.0.0' name : 'devices' keyspace : 'meight' columns : device_id : type : uuid ts : type : timestamp generated_columns : day : ts query : base : required : id : device_id optional : - day order : day : desc","title":"Example"},{"location":"#load-table-configuration","text":"from primeight.parser import YamlParser config = YamlParser . parse ( 'devices.yaml' )","title":"Load table configuration"},{"location":"#create-connection","text":"from primeight import CassandraManager manager = CassandraManager ([ '127.0.0.1' ]) manager . connect ()","title":"Create connection"},{"location":"#create-keyspace","text":"from primeight import CassandraKeyspace keyspace = CassandraKeyspace ( config , cassandra_manager = manager ) keyspace . create ()","title":"Create keyspace"},{"location":"#create-table","text":"from primeight import CassandraTable table = CassandraTable ( config , cassandra_manager = manager ) table . create ()","title":"Create table"},{"location":"#insert-data","text":"table . insert ({ 'device_id' : '659b6222-19fb-416e-9aa5-9df8cf679247' , 'ts' : 1592491059984 }) . execute ()","title":"Insert data"},{"location":"#query-data","text":"rows = \\ table \\ . query ( 'base' ) \\ . id ( '659b6222-19fb-416e-9aa5-9df8cf679247' ) \\ . execute ()","title":"Query data"},{"location":"#recap","text":"from primeight.parser import YamlParser from primeight import CassandraManager , CassandraKeyspace , CassandraTable # Load configuration. config = YamlParser . parse ( 'devices.yaml' ) # Connect to Cassandra cluster. manager = CassandraManager ([ '127.0.0.1' ]) manager . connect () # Create Keyspace and table. keyspace = CassandraKeyspace ( config , cassandra_manager = manager ) table = CassandraTable ( config , cassandra_manager = manager ) keyspace . create () . execute () table . create () . execute () # Insert line into table. table . insert ({ 'device_id' : '659b6222-19fb-416e-9aa5-9df8cf679247' , 'ts' : 1592491059984 }) . execute () # Query table. rows = \\ table \\ . query ( 'base' ) \\ . id ( '659b6222-19fb-416e-9aa5-9df8cf679247' ) \\ . execute () n_rows = len ( rows ) print ( f \"Queried { len ( rows ) } rows\" )","title":"Recap"},{"location":"#license","text":"This project is licensed under the terms of the Apache License 2.0 license.","title":"License"},{"location":"fundamentals/","text":"Fundamentals \u00b6 Configuration \u00b6 The primeight Python library is a unified interface to Cassandra. Each Cassandra table is defined by a Yaml configuration file. This Yaml file has a specific structure that is enforced by the parser. If any thing is not as expected the parser will throw a SyntaxError and provide an explanation why. Yaml structure \u00b6 Required Fields \u00b6 The yaml has 5 required fields: version , keyspace , name , columns , and query . Version \u00b6 The version field represents the version of the template. This field is used to keep track of the updates done to a table. Keyspace \u00b6 The keyspace field specifies the keyspace a table belongs. Since there are cases where the data may be associated with a dynamic keyspace, we the keyspace name can be overwritten for each action (e.g. while querying or inserting data). Name \u00b6 The name field is the name of the table. Columns \u00b6 The columns field is where the table columns are defined. It is a list of objects with a type required field. The object can be complemented with an alias name, a description , a min , and max values. The columns can have all the Cassandra Data Types , like int , float , text , etc..., or h3hex , a custom type used to partition the that geo-spatially. Cassandra Collections data types are also supported. For example, you can define a set of text attributes with set<text> , or a more complex example may be to define a list of GPS points with list<tuple<float,float,float>> . If you require the definition of minimum ( min ) and maximum ( max ) values, both values must be numbers (i.e. int or float ). Finally, since we also allow segmentation by keyspace, a table can define its keyspace in the yaml configuration using the keyspace field, or in an operation basis. The Cassandra table columns may also be complemented with generated_columns (see Generated Columns ). Query \u00b6 The query field is used to optimize queries. Here you can define the queries performed on the Cassandra table, and internally the system will optimize for speed. The base query is always required, ideally it should be the most used query. It reflects the Cassandra table, while the remaining queries are Materialized Views derived from this table. Every query has three types of columns: the required , the optional , and all the remaining columns. The required columns are the columns that should be specified each time you do a query. It can be segmented by time , space , and/or id . When using time and space as required columns you need to use generated columns. This is enforces a consistent search pattern. On the other hand, when using an id you can use any column. The optional field is used to enumerate columns that may be used for filtering with methods like between , or higher_then , or any of the available methods. Be aware that the order in the optional field is crucial, as you can not restrict a column without also defining the attributes that precede it. Additionally, you can specify an order to sort how the data is saved. There are two options, asc for ascending order, and desc for descending order. Note: You can only specify the order for required or optional attributes. Optional Fields \u00b6 Generated Columns \u00b6 Generated columns are columns that are created automatically using other attributes through the predefined generators. It is defined using the generated_columns field, that receives an object of mappings of generator to input attribute(s). When specifying more than one attribute, separate the attributes using a comma . For example: ... generated_columns : month : tsin h3 : lat,lon ... Generators \u00b6 day : receives a timestamp attribute and produces a timestamp for the same day at midnight week : receives a timestamp attribute and produces a timestamp for the first day of the week at midnight month : receives a timestamp attribute and produces a timestamp for the first day of the month at midnight year : receives a timestamp attribute and produces a timestamp for the first day of the year at midnight hX : receives latitude and longitude coordinates to produce an h3 hexadecimal identifier of level X. Available levels span from 3 to 12. hX_begin : receives latitude and longitude coordinates to produce an h3 hexadecimal identifier of level X. Available levels span from 3 to 12. This identifier is intended to specify the begin of something, e.g. a trip. hX_end : receives latitude and longitude coordinates to produce an h3 hexadecimal identifier of level X. Available levels span from 3 to 12. This identifier is intended to specify the end of something, e.g. a trip. Examples \u00b6 The simplest example is: version : '0.1' name : 'devices' keyspace : 'meight' columns : device_id : type : text query : base : required : id : device_id Partitions \u00b6 One of Cassandra's strongest points is how data is arranged and stored making it quickly accessible. This mechanism revolves around partitions. primeight recognises 3 major types of partition: time, space and ids. This makes the structuring of the tables consistent and fast to access. Each table has its partitions defined in the query required attribute.","title":"Fundamentals"},{"location":"fundamentals/#fundamentals","text":"","title":"Fundamentals"},{"location":"fundamentals/#configuration","text":"The primeight Python library is a unified interface to Cassandra. Each Cassandra table is defined by a Yaml configuration file. This Yaml file has a specific structure that is enforced by the parser. If any thing is not as expected the parser will throw a SyntaxError and provide an explanation why.","title":"Configuration"},{"location":"fundamentals/#yaml-structure","text":"","title":"Yaml structure"},{"location":"fundamentals/#required-fields","text":"The yaml has 5 required fields: version , keyspace , name , columns , and query .","title":"Required Fields"},{"location":"fundamentals/#version","text":"The version field represents the version of the template. This field is used to keep track of the updates done to a table.","title":"Version"},{"location":"fundamentals/#keyspace","text":"The keyspace field specifies the keyspace a table belongs. Since there are cases where the data may be associated with a dynamic keyspace, we the keyspace name can be overwritten for each action (e.g. while querying or inserting data).","title":"Keyspace"},{"location":"fundamentals/#name","text":"The name field is the name of the table.","title":"Name"},{"location":"fundamentals/#columns","text":"The columns field is where the table columns are defined. It is a list of objects with a type required field. The object can be complemented with an alias name, a description , a min , and max values. The columns can have all the Cassandra Data Types , like int , float , text , etc..., or h3hex , a custom type used to partition the that geo-spatially. Cassandra Collections data types are also supported. For example, you can define a set of text attributes with set<text> , or a more complex example may be to define a list of GPS points with list<tuple<float,float,float>> . If you require the definition of minimum ( min ) and maximum ( max ) values, both values must be numbers (i.e. int or float ). Finally, since we also allow segmentation by keyspace, a table can define its keyspace in the yaml configuration using the keyspace field, or in an operation basis. The Cassandra table columns may also be complemented with generated_columns (see Generated Columns ).","title":"Columns"},{"location":"fundamentals/#query","text":"The query field is used to optimize queries. Here you can define the queries performed on the Cassandra table, and internally the system will optimize for speed. The base query is always required, ideally it should be the most used query. It reflects the Cassandra table, while the remaining queries are Materialized Views derived from this table. Every query has three types of columns: the required , the optional , and all the remaining columns. The required columns are the columns that should be specified each time you do a query. It can be segmented by time , space , and/or id . When using time and space as required columns you need to use generated columns. This is enforces a consistent search pattern. On the other hand, when using an id you can use any column. The optional field is used to enumerate columns that may be used for filtering with methods like between , or higher_then , or any of the available methods. Be aware that the order in the optional field is crucial, as you can not restrict a column without also defining the attributes that precede it. Additionally, you can specify an order to sort how the data is saved. There are two options, asc for ascending order, and desc for descending order. Note: You can only specify the order for required or optional attributes.","title":"Query"},{"location":"fundamentals/#optional-fields","text":"","title":"Optional Fields"},{"location":"fundamentals/#generated-columns","text":"Generated columns are columns that are created automatically using other attributes through the predefined generators. It is defined using the generated_columns field, that receives an object of mappings of generator to input attribute(s). When specifying more than one attribute, separate the attributes using a comma . For example: ... generated_columns : month : tsin h3 : lat,lon ...","title":"Generated Columns"},{"location":"fundamentals/#generators","text":"day : receives a timestamp attribute and produces a timestamp for the same day at midnight week : receives a timestamp attribute and produces a timestamp for the first day of the week at midnight month : receives a timestamp attribute and produces a timestamp for the first day of the month at midnight year : receives a timestamp attribute and produces a timestamp for the first day of the year at midnight hX : receives latitude and longitude coordinates to produce an h3 hexadecimal identifier of level X. Available levels span from 3 to 12. hX_begin : receives latitude and longitude coordinates to produce an h3 hexadecimal identifier of level X. Available levels span from 3 to 12. This identifier is intended to specify the begin of something, e.g. a trip. hX_end : receives latitude and longitude coordinates to produce an h3 hexadecimal identifier of level X. Available levels span from 3 to 12. This identifier is intended to specify the end of something, e.g. a trip.","title":"Generators"},{"location":"fundamentals/#examples","text":"The simplest example is: version : '0.1' name : 'devices' keyspace : 'meight' columns : device_id : type : text query : base : required : id : device_id","title":"Examples"},{"location":"fundamentals/#partitions","text":"One of Cassandra's strongest points is how data is arranged and stored making it quickly accessible. This mechanism revolves around partitions. primeight recognises 3 major types of partition: time, space and ids. This makes the structuring of the tables consistent and fast to access. Each table has its partitions defined in the query required attribute.","title":"Partitions"},{"location":"reference/cassandra-base/","text":"CassandraBase \u00b6 The CassandraBase class serves as a common base. Import \u00b6 from primeight.base import CassandraColumn Constructor \u00b6 config dict [Required] : table configuration, as returned by one of the parsers cassandra_manager primeight . manager . CassandraManager (Default: None ) : Cassandra manager Attributes \u00b6 cassandra_manager \u00b6 Type : primeight . manager . CassandraManager Cassandra manager where to run the statements. config \u00b6 Type : dict Table configuration, as returned by one of the parsers from the module primeight . parser . statements \u00b6 Type : List [ str ] Current statements in object. Methods \u00b6 execute \u00b6 Execute CassandraBase . statements sequentially using the CassandraBase . cassandra_manager . The return type depends on the row_factory defined in the execution profile. Parameters: execution_profile str or cassandra . cluster . ExecutionProfile (Default: None ) : Execution profile name or ExecutionProfile object Return: List [ tuple ] or List [ dict ] execute_concurrent \u00b6 Execute CassandraBase . statements concurrently using the CassandraBase . cassandra_manager . The return type depends on the row_factory defined in the execution profile. Parameters: raise_on_first_error bool (Default: False ) : Whether to stop after the first failed statement Return: List [ tuple ] or List [ dict ]","title":"CassandraBase"},{"location":"reference/cassandra-base/#cassandrabase","text":"The CassandraBase class serves as a common base.","title":"CassandraBase"},{"location":"reference/cassandra-base/#import","text":"from primeight.base import CassandraColumn","title":"Import"},{"location":"reference/cassandra-base/#constructor","text":"config dict [Required] : table configuration, as returned by one of the parsers cassandra_manager primeight . manager . CassandraManager (Default: None ) : Cassandra manager","title":"Constructor"},{"location":"reference/cassandra-base/#attributes","text":"","title":"Attributes"},{"location":"reference/cassandra-base/#cassandra_manager","text":"Type : primeight . manager . CassandraManager Cassandra manager where to run the statements.","title":"cassandra_manager"},{"location":"reference/cassandra-base/#config","text":"Type : dict Table configuration, as returned by one of the parsers from the module primeight . parser .","title":"config"},{"location":"reference/cassandra-base/#statements","text":"Type : List [ str ] Current statements in object.","title":"statements"},{"location":"reference/cassandra-base/#methods","text":"","title":"Methods"},{"location":"reference/cassandra-base/#execute","text":"Execute CassandraBase . statements sequentially using the CassandraBase . cassandra_manager . The return type depends on the row_factory defined in the execution profile. Parameters: execution_profile str or cassandra . cluster . ExecutionProfile (Default: None ) : Execution profile name or ExecutionProfile object Return: List [ tuple ] or List [ dict ]","title":"execute"},{"location":"reference/cassandra-base/#execute_concurrent","text":"Execute CassandraBase . statements concurrently using the CassandraBase . cassandra_manager . The return type depends on the row_factory defined in the execution profile. Parameters: raise_on_first_error bool (Default: False ) : Whether to stop after the first failed statement Return: List [ tuple ] or List [ dict ]","title":"execute_concurrent"},{"location":"reference/cassandra-column/","text":"CassandraColumn \u00b6 The CassandraColumn represents the columns of Cassandra tables. Import \u00b6 from primeight import CassandraColumn Constructor github \u00b6 name str [Required] : Column name. type_handle str [Required] : Column type. alias str (Default: None ) : A different name to identify the column. description str (Default: None ) : Column description. min_value int or float (Default: None ) : Minimum value that column can have. max_value int or float (Default: None ) : Maximum value that column can have. Attributes \u00b6 name \u00b6 Type : str Column name. type \u00b6 Type : str Column type. alias \u00b6 Type : str A different name to identify the column. description \u00b6 Type : str Column description. min_value \u00b6 Type : int or float Minimum value that column can have. max_value \u00b6 Type : int or float Minimum value that column can have. Methods \u00b6 pydantic_type \u00b6 Column Pydantic type. Parameters: handle str (Default: None ) Column type handler. If set to None , CassandraColumn . type is used. This parameter is mostly used internally. Return: Any cassandra_type \u00b6 Cassandra column type. Parameters: handle str (Default: None ) Column type handler. If set to None , CassandraColumn . type is used. This parameter is mostly used internally. frozen bool (Default: True ) Whether the column should be frozen or not. Return: str is_valid \u00b6 Validate value according to the maximum and minimum values of the column. Parameters: value int or float [Required] : Value to validate Return: bool","title":"CassandraColumn"},{"location":"reference/cassandra-column/#cassandracolumn","text":"The CassandraColumn represents the columns of Cassandra tables.","title":"CassandraColumn"},{"location":"reference/cassandra-column/#import","text":"from primeight import CassandraColumn","title":"Import"},{"location":"reference/cassandra-column/#constructor-github","text":"name str [Required] : Column name. type_handle str [Required] : Column type. alias str (Default: None ) : A different name to identify the column. description str (Default: None ) : Column description. min_value int or float (Default: None ) : Minimum value that column can have. max_value int or float (Default: None ) : Maximum value that column can have.","title":"Constructor github"},{"location":"reference/cassandra-column/#attributes","text":"","title":"Attributes"},{"location":"reference/cassandra-column/#name","text":"Type : str Column name.","title":"name"},{"location":"reference/cassandra-column/#type","text":"Type : str Column type.","title":"type"},{"location":"reference/cassandra-column/#alias","text":"Type : str A different name to identify the column.","title":"alias"},{"location":"reference/cassandra-column/#description","text":"Type : str Column description.","title":"description"},{"location":"reference/cassandra-column/#min_value","text":"Type : int or float Minimum value that column can have.","title":"min_value"},{"location":"reference/cassandra-column/#max_value","text":"Type : int or float Minimum value that column can have.","title":"max_value"},{"location":"reference/cassandra-column/#methods","text":"","title":"Methods"},{"location":"reference/cassandra-column/#pydantic_type","text":"Column Pydantic type. Parameters: handle str (Default: None ) Column type handler. If set to None , CassandraColumn . type is used. This parameter is mostly used internally. Return: Any","title":"pydantic_type"},{"location":"reference/cassandra-column/#cassandra_type","text":"Cassandra column type. Parameters: handle str (Default: None ) Column type handler. If set to None , CassandraColumn . type is used. This parameter is mostly used internally. frozen bool (Default: True ) Whether the column should be frozen or not. Return: str","title":"cassandra_type"},{"location":"reference/cassandra-column/#is_valid","text":"Validate value according to the maximum and minimum values of the column. Parameters: value int or float [Required] : Value to validate Return: bool","title":"is_valid"},{"location":"reference/cassandra-keyspace/","text":"CassandraKeyspace \u00b6 Inherits: primeight . base . CassandraBase The CassandraKeyspace manages keyspace interactions. Import \u00b6 from primeight import CassandraKeyspace Constructor \u00b6 config dict [Required] : Table configuration, as returned by one of the parsers cassandra_manager primeight . manager . CassandraManager (Default: None ) : Cassandra manager Attributes \u00b6 cassandra_manager \u00b6 Type : primeight . manager . CassandraManager Cassandra manager where to run the statements. config \u00b6 Type : dict Table configuration, as returned by one of the parsers from the module primeight . parser . statements \u00b6 Type : List [ str ] Current statements in object. name \u00b6 Type : str Keyspace name. Methods \u00b6 create \u00b6 Build keyspace CREATE statement(s). Note The statement is only executed using the execute methods (e.g CassandraKeyspace . execute ). Parameters: name str or List [ str ] (Default: None ) : Keyspace name. If a List [ str ] is passed it will create multiple statements, one for each name. If set to None , the CassandraKeyspace . name is used instead. replication_strategy str (Default: SimpleStrategy ) : Keyspace replication strategy. replication_factor int or Dict [ str , int ] (Default: 3 ) : Keyspace replication factor. When using the SimpleStrategy replication strategy, this parameter should be an integer. When using the NetworkTopologyStrategy replication strategy, this should be a dictionary mapping data center names to an integer representing the replication factor in that data center. if_not_exists bool (Default: False ) : If True adds IF NOT EXISTS option to the statement(s). Attempting to create a keyspace that already exists will return an error unless the IF NOT EXISTS option is used. If it is used, the statement will be a no-op if the keyspace already exists. Return: self drop \u00b6 Build keyspace DROP statement(s). Note The statement is only executed using the execute methods (e.g CassandraKeyspace . execute ). Parameters: name str or List [ str ] (Default: None ) : Keyspace name. If a List [ str ] is passed it will create multiple statements, one for each name. If set to None , the CassandraKeyspace . name is used instead. if_exists bool (Default: False ) : If True adds IF EXISTS option to the statement(s). If the keyspace does not exists, the statement will return an error, unless IF EXISTS is used in which case the operation is a no-op. Return: self alter \u00b6 Build keyspace ALTER statement(s). Note The statement is only executed using the execute methods (e.g CassandraKeyspace . execute ). Parameters: name str or List [ str ] (Default: None ) : Keyspace name. If a List [ str ] is passed it will create multiple statements, one for each name. If set to None , the CassandraKeyspace . name is used instead. replication_strategy str (Default: SimpleStrategy ) : Keyspace replication strategy. replication_factor int or Dict [ str , int ] (Default: 3 ) : Keyspace replication factor. When using the SimpleStrategy replication strategy, this parameter should be an integer. When using the NetworkTopologyStrategy replication strategy, this should be a dictionary mapping data center names to an integer representing the replication factor in that data center. Return: self","title":"CassandraKeyspace"},{"location":"reference/cassandra-keyspace/#cassandrakeyspace","text":"Inherits: primeight . base . CassandraBase The CassandraKeyspace manages keyspace interactions.","title":"CassandraKeyspace"},{"location":"reference/cassandra-keyspace/#import","text":"from primeight import CassandraKeyspace","title":"Import"},{"location":"reference/cassandra-keyspace/#constructor","text":"config dict [Required] : Table configuration, as returned by one of the parsers cassandra_manager primeight . manager . CassandraManager (Default: None ) : Cassandra manager","title":"Constructor"},{"location":"reference/cassandra-keyspace/#attributes","text":"","title":"Attributes"},{"location":"reference/cassandra-keyspace/#cassandra_manager","text":"Type : primeight . manager . CassandraManager Cassandra manager where to run the statements.","title":"cassandra_manager"},{"location":"reference/cassandra-keyspace/#config","text":"Type : dict Table configuration, as returned by one of the parsers from the module primeight . parser .","title":"config"},{"location":"reference/cassandra-keyspace/#statements","text":"Type : List [ str ] Current statements in object.","title":"statements"},{"location":"reference/cassandra-keyspace/#name","text":"Type : str Keyspace name.","title":"name"},{"location":"reference/cassandra-keyspace/#methods","text":"","title":"Methods"},{"location":"reference/cassandra-keyspace/#create","text":"Build keyspace CREATE statement(s). Note The statement is only executed using the execute methods (e.g CassandraKeyspace . execute ). Parameters: name str or List [ str ] (Default: None ) : Keyspace name. If a List [ str ] is passed it will create multiple statements, one for each name. If set to None , the CassandraKeyspace . name is used instead. replication_strategy str (Default: SimpleStrategy ) : Keyspace replication strategy. replication_factor int or Dict [ str , int ] (Default: 3 ) : Keyspace replication factor. When using the SimpleStrategy replication strategy, this parameter should be an integer. When using the NetworkTopologyStrategy replication strategy, this should be a dictionary mapping data center names to an integer representing the replication factor in that data center. if_not_exists bool (Default: False ) : If True adds IF NOT EXISTS option to the statement(s). Attempting to create a keyspace that already exists will return an error unless the IF NOT EXISTS option is used. If it is used, the statement will be a no-op if the keyspace already exists. Return: self","title":"create"},{"location":"reference/cassandra-keyspace/#drop","text":"Build keyspace DROP statement(s). Note The statement is only executed using the execute methods (e.g CassandraKeyspace . execute ). Parameters: name str or List [ str ] (Default: None ) : Keyspace name. If a List [ str ] is passed it will create multiple statements, one for each name. If set to None , the CassandraKeyspace . name is used instead. if_exists bool (Default: False ) : If True adds IF EXISTS option to the statement(s). If the keyspace does not exists, the statement will return an error, unless IF EXISTS is used in which case the operation is a no-op. Return: self","title":"drop"},{"location":"reference/cassandra-keyspace/#alter","text":"Build keyspace ALTER statement(s). Note The statement is only executed using the execute methods (e.g CassandraKeyspace . execute ). Parameters: name str or List [ str ] (Default: None ) : Keyspace name. If a List [ str ] is passed it will create multiple statements, one for each name. If set to None , the CassandraKeyspace . name is used instead. replication_strategy str (Default: SimpleStrategy ) : Keyspace replication strategy. replication_factor int or Dict [ str , int ] (Default: 3 ) : Keyspace replication factor. When using the SimpleStrategy replication strategy, this parameter should be an integer. When using the NetworkTopologyStrategy replication strategy, this should be a dictionary mapping data center names to an integer representing the replication factor in that data center. Return: self","title":"alter"},{"location":"reference/cassandra-manager/","text":"CassandraManager \u00b6 The CassandraManager manages all the interactions with Cassandra. Import \u00b6 from primeight import CassandraManager Constructor \u00b6 contact_points List [ str ] [Required] : List of Cassandra contact points. connect_timeout float (Default: 5.0 ) : Timeout, in seconds, for creating new connections. control_connection_timeout float (Default: 2.0 ) : A timeout, in seconds, for queries made by the control connection, such as querying the current schema and information about nodes in the cluster. If set to None , there will be no timeout for these queries. profiles Dict [ str , cassandra . cluster . ExecutionProfile ] (Default: None ) : Dictionary of Cassandra Execution Profiles , with the execution profile name as key. These profiles are available when executing queries. If set to None , defaults to a execution profile with: cassandra . policies . RoundRobinPolicy load balancing policy cassandra . policies . RetryPolicy retry policy LOCAL_ONE consistency level cassandra . query . dict_factory row factory 10.0 second request_timeout Attributes \u00b6 contact_points \u00b6 Type : List [ str ] List of Cassandra contact points, i.e. the addresses used to connect. cluster \u00b6 Type : cassandra . cluster . Cluster Cassandra Cluster object. session \u00b6 Type : cassandra . cluster . Session Cassandra Session object. execution_profiles \u00b6 Type: Dict [ str , cassandra . cluster . ExecutionProfile ] Dictionary of Cassandra ExecutionProfiles , with the execution profile name as key. These profiles are available when executing queries. address_translator \u00b6 Type: cassandra . policies . AddressTranslator Cassandra AddressTranslator in use (if any). Methods \u00b6 create_execution_profile \u00b6 Static Method Create a Cassandra execution profile . Parameters: load_balancing_policy cassandra . policies . LoadBalancingPolicy [Required] retry_policy cassandra . policies . RetryPolicy [Required] consistency_level cassandra . policies . RetryPolicy (Default: cassandra . ConsistencyLevel . LOCAL_ONE ) row_factory Callable (Default: cassandra . query . dict_factory ) request_timeout float (Default: 10.0 ) Return: cassandra . cluster . ExecutionProfile connect \u00b6 Connect to Cassandra, and creates a session . Parameters: keyspace str (Default: None ) : Default keyspace for operations. Return: self execute \u00b6 Execute statement(s) sequentially. The return type depends on the row_factory defined in the execution profile. Parameters: statements List [ str ] (Default: None ) : List of statements execution_profile str or cassandra . cluster . ExecutionProfile (Default: None ) : Execution profile name or ExecutionProfile object Return: List [ tuple ] or List [ dict ] execute_concurrent \u00b6 Execute statement(s) concurrently. The return type depends on the row_factory defined in the execution profile. Parameters: statements List [ str ] (Default: None ) : List of statements raise_on_first_error bool (Default: False ) : Whether to stop after the first failed statement Return: List [ tuple ] or List [ dict ]","title":"CassandraManager"},{"location":"reference/cassandra-manager/#cassandramanager","text":"The CassandraManager manages all the interactions with Cassandra.","title":"CassandraManager"},{"location":"reference/cassandra-manager/#import","text":"from primeight import CassandraManager","title":"Import"},{"location":"reference/cassandra-manager/#constructor","text":"contact_points List [ str ] [Required] : List of Cassandra contact points. connect_timeout float (Default: 5.0 ) : Timeout, in seconds, for creating new connections. control_connection_timeout float (Default: 2.0 ) : A timeout, in seconds, for queries made by the control connection, such as querying the current schema and information about nodes in the cluster. If set to None , there will be no timeout for these queries. profiles Dict [ str , cassandra . cluster . ExecutionProfile ] (Default: None ) : Dictionary of Cassandra Execution Profiles , with the execution profile name as key. These profiles are available when executing queries. If set to None , defaults to a execution profile with: cassandra . policies . RoundRobinPolicy load balancing policy cassandra . policies . RetryPolicy retry policy LOCAL_ONE consistency level cassandra . query . dict_factory row factory 10.0 second request_timeout","title":"Constructor"},{"location":"reference/cassandra-manager/#attributes","text":"","title":"Attributes"},{"location":"reference/cassandra-manager/#contact_points","text":"Type : List [ str ] List of Cassandra contact points, i.e. the addresses used to connect.","title":"contact_points"},{"location":"reference/cassandra-manager/#cluster","text":"Type : cassandra . cluster . Cluster Cassandra Cluster object.","title":"cluster"},{"location":"reference/cassandra-manager/#session","text":"Type : cassandra . cluster . Session Cassandra Session object.","title":"session"},{"location":"reference/cassandra-manager/#execution_profiles","text":"Type: Dict [ str , cassandra . cluster . ExecutionProfile ] Dictionary of Cassandra ExecutionProfiles , with the execution profile name as key. These profiles are available when executing queries.","title":"execution_profiles"},{"location":"reference/cassandra-manager/#address_translator","text":"Type: cassandra . policies . AddressTranslator Cassandra AddressTranslator in use (if any).","title":"address_translator"},{"location":"reference/cassandra-manager/#methods","text":"","title":"Methods"},{"location":"reference/cassandra-manager/#create_execution_profile","text":"Static Method Create a Cassandra execution profile . Parameters: load_balancing_policy cassandra . policies . LoadBalancingPolicy [Required] retry_policy cassandra . policies . RetryPolicy [Required] consistency_level cassandra . policies . RetryPolicy (Default: cassandra . ConsistencyLevel . LOCAL_ONE ) row_factory Callable (Default: cassandra . query . dict_factory ) request_timeout float (Default: 10.0 ) Return: cassandra . cluster . ExecutionProfile","title":"create_execution_profile"},{"location":"reference/cassandra-manager/#connect","text":"Connect to Cassandra, and creates a session . Parameters: keyspace str (Default: None ) : Default keyspace for operations. Return: self","title":"connect"},{"location":"reference/cassandra-manager/#execute","text":"Execute statement(s) sequentially. The return type depends on the row_factory defined in the execution profile. Parameters: statements List [ str ] (Default: None ) : List of statements execution_profile str or cassandra . cluster . ExecutionProfile (Default: None ) : Execution profile name or ExecutionProfile object Return: List [ tuple ] or List [ dict ]","title":"execute"},{"location":"reference/cassandra-manager/#execute_concurrent","text":"Execute statement(s) concurrently. The return type depends on the row_factory defined in the execution profile. Parameters: statements List [ str ] (Default: None ) : List of statements raise_on_first_error bool (Default: False ) : Whether to stop after the first failed statement Return: List [ tuple ] or List [ dict ]","title":"execute_concurrent"},{"location":"reference/cassandra-materialized-view/","text":"CassandraMaterializedView \u00b6 Inherits: primeight . CassandraTable The CassandraMaterializedView manages materialized view interactions. Import \u00b6 from primeight import CassandraMaterializedView Constructor \u00b6 config dict [Required] : Table configuration, as returned by one of the parsers. query_name str [Required] : Query name. keyspace primeight . keyspace . CassandraKeyspace [Required] : Keyspace. cassandra_manager primeight . manager . CassandraManager (Default: None ) : Cassandra manager. Attributes \u00b6 query_name \u00b6 Type : str Query name. Methods \u00b6 create \u00b6 Build materialized view CREATE statement(s). Note The statement is only executed using the execute methods (e.g CassandraMaterializedView . execute ). Parameters: keyspace str or List[str] (Default: None ) : Keyspace name(s). If a List [ str ] is passed it will create multiple statements, one for each name. If set to None , CassandraMaterializedView . keyspace is used instead. gc_grace_seconds int (Default: 86400 ) : Grace period in seconds. Time to wait before garbage collecting tombstones (deletion markers). if_not_exists bool (Default: False ) : If True adds IF NOT EXISTS option to the statement(s). Attempting to create an already existing materialized view will return an error unless the IF NOT EXISTS option is used. If it is used, the statement will be a no-op if the materialized view already exists. Return: self drop \u00b6 Build materialized view DROP statement(s). Note The statement is only executed using the execute methods (e.g CassandraMaterializedView . execute ). Parameters: keyspace str or List[str] (Default: None ) : Keyspace name(s). If a List [ str ] is passed it will create multiple statements, one for each name. If set to None , CassandraMaterializedView . keyspace is used instead. if_exists bool (Default: False ) : If True adds IF EXISTS option to the statement(s). If the materialized view(s) do not exist, the statement will return an error, unless IF EXISTS is used in which case the operation is a no-op. Return: self insert \u00b6 Materialize views do not support inserts. Danger Calling this method will generate an Exception . query \u00b6 Build materialized view SELECT statement(s). This method can be chained with the methods required to define restrictions, and ending with the CassandraMaterializedView.execute method. Note The statement is only executed using the execute methods (e.g CassandraMaterializedView . execute ). Parameters: keyspace str or List[str] (Default: None ) : Keyspace name(s). If a List [ str ] is passed it will create multiple statements, one for each name. If set to None , CassandraMaterializedView . keyspace is used instead. Return: self","title":"CassandraMaterializedView"},{"location":"reference/cassandra-materialized-view/#cassandramaterializedview","text":"Inherits: primeight . CassandraTable The CassandraMaterializedView manages materialized view interactions.","title":"CassandraMaterializedView"},{"location":"reference/cassandra-materialized-view/#import","text":"from primeight import CassandraMaterializedView","title":"Import"},{"location":"reference/cassandra-materialized-view/#constructor","text":"config dict [Required] : Table configuration, as returned by one of the parsers. query_name str [Required] : Query name. keyspace primeight . keyspace . CassandraKeyspace [Required] : Keyspace. cassandra_manager primeight . manager . CassandraManager (Default: None ) : Cassandra manager.","title":"Constructor"},{"location":"reference/cassandra-materialized-view/#attributes","text":"","title":"Attributes"},{"location":"reference/cassandra-materialized-view/#query_name","text":"Type : str Query name.","title":"query_name"},{"location":"reference/cassandra-materialized-view/#methods","text":"","title":"Methods"},{"location":"reference/cassandra-materialized-view/#create","text":"Build materialized view CREATE statement(s). Note The statement is only executed using the execute methods (e.g CassandraMaterializedView . execute ). Parameters: keyspace str or List[str] (Default: None ) : Keyspace name(s). If a List [ str ] is passed it will create multiple statements, one for each name. If set to None , CassandraMaterializedView . keyspace is used instead. gc_grace_seconds int (Default: 86400 ) : Grace period in seconds. Time to wait before garbage collecting tombstones (deletion markers). if_not_exists bool (Default: False ) : If True adds IF NOT EXISTS option to the statement(s). Attempting to create an already existing materialized view will return an error unless the IF NOT EXISTS option is used. If it is used, the statement will be a no-op if the materialized view already exists. Return: self","title":"create"},{"location":"reference/cassandra-materialized-view/#drop","text":"Build materialized view DROP statement(s). Note The statement is only executed using the execute methods (e.g CassandraMaterializedView . execute ). Parameters: keyspace str or List[str] (Default: None ) : Keyspace name(s). If a List [ str ] is passed it will create multiple statements, one for each name. If set to None , CassandraMaterializedView . keyspace is used instead. if_exists bool (Default: False ) : If True adds IF EXISTS option to the statement(s). If the materialized view(s) do not exist, the statement will return an error, unless IF EXISTS is used in which case the operation is a no-op. Return: self","title":"drop"},{"location":"reference/cassandra-materialized-view/#insert","text":"Materialize views do not support inserts. Danger Calling this method will generate an Exception .","title":"insert"},{"location":"reference/cassandra-materialized-view/#query","text":"Build materialized view SELECT statement(s). This method can be chained with the methods required to define restrictions, and ending with the CassandraMaterializedView.execute method. Note The statement is only executed using the execute methods (e.g CassandraMaterializedView . execute ). Parameters: keyspace str or List[str] (Default: None ) : Keyspace name(s). If a List [ str ] is passed it will create multiple statements, one for each name. If set to None , CassandraMaterializedView . keyspace is used instead. Return: self","title":"query"},{"location":"reference/cassandra-table/","text":"CassandraTable \u00b6 Inherits: primeight . base . CassandraBase The CassandraTable manages table interactions. Import \u00b6 from primeight import CassandraTable Constructor \u00b6 config dict [Required] : Table configuration, as returned by one of the parsers. query_name primeight . keyspace . CassandraKeyspace [Required] : Keyspace. cassandra_manager primeight . manager . CassandraManager (Default: None ) : Cassandra manager. Attributes \u00b6 name \u00b6 Type : str Table name. keyspace \u00b6 Type : primeight . CassandraKeyspace Keyspace passed during object initialization. columns \u00b6 Type : List [ primeight . CassandraColumn ] List of columns. col \u00b6 Type : Dict [ str , primeight . CassandraColumn ] Dictionary of columns, maping column name to the column itself. model \u00b6 Type : pydantic . BaseModel Pydantic model representing the table. Methods \u00b6 get_columns \u00b6 Filter list of columns by list of names and/or alias, working as a white list. If names is None and alias is None , all columns are returned. Parameters: names List[str] (Default: None ) : List of names. alias List[str] (Default: None ) : List of alias. Return: List [ primeight . CassandraColumn ] get \u00b6 Get column by name. If there is no column with the specified name, None is returned. Parameters: name str [Required] : Column name. Return: Optional [ CassandraColumn ] has_split \u00b6 Whether a table has a temporal split or not. Return: bool create \u00b6 Build table CREATE statement(s). Note The statement is only executed using the execute methods (e.g CassandraTable . execute ). Parameters: keyspace str or List[str] (Default: None ) : Keyspace name(s). If a List [ str ] is passed it will create multiple statements, one for each name. If set to None , CassandraMaterializedView . keyspace is used instead. gc_grace_seconds int (Default: 86400 ) : Grace period in seconds. Time to wait before garbage collecting tombstones (deletion markers). if_not_exists bool (Default: False ) : If True adds IF NOT EXISTS option to the statement(s). Attempting to create an already existing materialized view will return an error unless the IF NOT EXISTS option is used. If it is used, the statement will be a no-op if the materialized view already exists. create_materialized_views bool (Default: True ) : Whether to create the materialized view CREATE statement(s) after the table statement(s). Return: self drop \u00b6 Build table DROP statement(s). Note The statement is only executed using the execute methods (e.g CassandraTable . execute ). Parameters: keyspace str or List[str] (Default: None ) : Keyspace name(s). If a List [ str ] is passed it will create multiple statements, one for each name. If set to None , CassandraMaterializedView . keyspace is used instead. if_exists bool (Default: False ) : If True adds IF EXISTS option to the statement(s). If the materialized view(s) do not exist, the statement will return an error, unless IF EXISTS is used in which case the operation is a no-op. drop_materialized_views bool (Default: True ) : Whether to create the materialized view DROP statement(s) before the table statement(s). Return: self insert \u00b6 Build table INSERT statement. When Cassandra does an insert and the row already exists, it overwrites the current column values. Also, for Cassandra, None row values are considered as empty, meaning that if you overwrite a column with a None value it will delete that row column. This means that you need to be careful whenever making inserts, so that you do not delete any undesired columns. Note The statement is only executed using the execute methods (e.g CassandraTable . execute ). Parameters: row Dict [ str , Any ] [Required] : Row. keyspace str or List[str] (Default: None ) : Keyspace name(s). If a List [ str ] is passed it will create multiple statements, one for each name. If set to None , CassandraMaterializedView . keyspace is used instead. ttl bool (Default: False ) : Specifies an optional Time To Live in seconds for the inserted values. If set, the inserted values are automatically removed from the database after the specified time. Note that the TTL concerns the inserted values, not the columns themselves. This means that any subsequent update of the column will also reset the TTL (to whatever TTL is specified in that update). By default, values never expire. A TTL of 0 is equivalent to no TTL. If the table has a default_time_to_live, a TTL of 0 will remove the TTL for the inserted or updated values. A TTL of null is equivalent to inserting with a TTL of 0. Return: self query \u00b6 Build table or materialized view SELECT statement(s), depending on the query name selected. This method can be chained with the methods required to define restrictions, and ending with the CassandraTable.execute method. Note The statement is only executed using the execute methods (e.g CassandraTable . execute ). Parameters: name str (Default: 'base' ) : Query name. keyspace str or List [ str ] (Default: None ) : Keyspace name(s). If a List [ str ] is passed it will create multiple statements, one for each name. If set to None , CassandraTable . keyspace is used instead. Return: self select \u00b6 Filter columns of SELECT statement(s), works as a white list. If not called, all columns will be returned. This method must be chained after the CassandraTable . query method. Note The statement is only executed using the execute methods (e.g CassandraTable . execute ). Parameters: columns List [ str ] (Default: 'base' ) : List of column names. Return: self time \u00b6 Complement SELECT statement(s), with time information. This method complements the table split and , if split_only is False , adds the where clause for the time column specified in the table configuration. This method must be chained after the CassandraTable . query method. Note The statement is only executed using the execute methods (e.g CassandraTable . execute ). Parameters: start datetime . datetime [Required] : Start date. end datetime . datetime [Required] : End date. prepare bool (Default: False ) : Whether to create statement ready to be a prepared statement. If set to True , will only define table split and will leave the required key as a prepared statement parameter. split_only bool (Default: False ) : Whether to only complement the table split as specified in the table configuration. Return: self space \u00b6 Complement SELECT statement(s), with space information. This method adds the where clause for the space column specified in the table configuration. This method must be chained after the CassandraTable . query method. Note The statement is only executed using the execute methods (e.g CassandraTable . execute ). Parameters: identifier str or List [ str ] (Default: None ) : Space identifier or list of identifiers. If set to None , will leave the required key as a prepared statement parameter. Return: self id \u00b6 Complement SELECT statement(s), with identifier information. This method adds the where clause for the id column specified in the table configuration. This method must be chained after the CassandraTable . query method. Note The statement is only executed using the execute methods (e.g CassandraTable . execute ). Parameters: identifier str or List [ str ] (Default: None ) : Identifier or list of identifiers. If set to None , will leave the required key as a prepared statement parameter. Return: self equals \u00b6 Complement SELECT statement(s), with an equality where clause. This method must be chained after the CassandraTable . query method. Note The statement is only executed using the execute methods (e.g CassandraTable . execute ). Parameters: column str [Required] : Column name. value Any (Default: None ) : Value. If set to None , will leave the column as a prepared statement parameter. Return: self among \u00b6 Complement SELECT statement(s), with an IN where clause. This method must be chained after the CassandraTable . query method. Note The statement is only executed using the execute methods (e.g CassandraTable . execute ). Parameters: column str [Required] : Column name. value List [ Any ] (Default: None ) : List of values. If set to None , will leave the column as a prepared statement parameter. Return: self between \u00b6 Complement SELECT statement(s), with a range where clause. This method must be chained after the CassandraTable . query method. Note The statement is only executed using the execute methods (e.g CassandraTable . execute ). Parameters: column str [Required] : Column name. lower Any (Default: None ) : Lower value. If set to None , will leave the column as a prepared statement parameter. higher Any (Default: None ) : Higher value. If set to None , will leave the column as a prepared statement parameter. Return: self between_including \u00b6 Complement SELECT statement(s), with an inclusive range where clause. This method must be chained after the CassandraTable . query method. Note The statement is only executed using the execute methods (e.g CassandraTable . execute ). Parameters: column str [Required] : Column name. lower Any (Default: None ) : Lower value. If set to None , will leave the column as a prepared statement parameter. higher Any (Default: None ) : Higher value. If set to None , will leave the column as a prepared statement parameter. Return: self lower_than \u00b6 Complement SELECT statement(s), with a lower than inequality where clause. This method must be chained after the CassandraTable . query method. Note The statement is only executed using the execute methods (e.g CassandraTable . execute ). Parameters: column str [Required] : Column name. boundary Any (Default: None ) : Value. If set to None , will leave the column as a prepared statement parameter. Return: self lower_or_equal_than \u00b6 Complement SELECT statement(s), with a lower or equal than inequality where clause. This method must be chained after the CassandraTable . query method. Note The statement is only executed using the execute methods (e.g CassandraTable . execute ). Parameters: column str [Required] : Column name. boundary Any (Default: None ) : Value. If set to None , will leave the column as a prepared statement parameter. Return: self higher_than \u00b6 Complement SELECT statement(s), with a higher than inequality where clause. This method must be chained after the CassandraTable . query method. Note The statement is only executed using the execute methods (e.g CassandraTable . execute ). Parameters: column str [Required] : Column name. boundary Any (Default: None ) : Value. If set to None , will leave the column as a prepared statement parameter. Return: self higher_or_equal_than \u00b6 Complement SELECT statement(s), with a higher or equal than inequality where clause. This method must be chained after the CassandraTable . query method. Note The statement is only executed using the execute methods (e.g CassandraTable . execute ). Parameters: column str [Required] : Column name. boundary Any (Default: None ) : Value. If set to None , will leave the column as a prepared statement parameter. Return: self limit \u00b6 Complement SELECT statement(s), with a LIMIT clause. The LIMIT option to a SELECT statement limits the number of rows returned by a query. This method must be chained after the CassandraTable . query method. Note The statement is only executed using the execute methods (e.g CassandraTable . execute ). Parameters: value int [Required] : Limiting value. Return: self","title":"CassandraTable"},{"location":"reference/cassandra-table/#cassandratable","text":"Inherits: primeight . base . CassandraBase The CassandraTable manages table interactions.","title":"CassandraTable"},{"location":"reference/cassandra-table/#import","text":"from primeight import CassandraTable","title":"Import"},{"location":"reference/cassandra-table/#constructor","text":"config dict [Required] : Table configuration, as returned by one of the parsers. query_name primeight . keyspace . CassandraKeyspace [Required] : Keyspace. cassandra_manager primeight . manager . CassandraManager (Default: None ) : Cassandra manager.","title":"Constructor"},{"location":"reference/cassandra-table/#attributes","text":"","title":"Attributes"},{"location":"reference/cassandra-table/#name","text":"Type : str Table name.","title":"name"},{"location":"reference/cassandra-table/#keyspace","text":"Type : primeight . CassandraKeyspace Keyspace passed during object initialization.","title":"keyspace"},{"location":"reference/cassandra-table/#columns","text":"Type : List [ primeight . CassandraColumn ] List of columns.","title":"columns"},{"location":"reference/cassandra-table/#col","text":"Type : Dict [ str , primeight . CassandraColumn ] Dictionary of columns, maping column name to the column itself.","title":"col"},{"location":"reference/cassandra-table/#model","text":"Type : pydantic . BaseModel Pydantic model representing the table.","title":"model"},{"location":"reference/cassandra-table/#methods","text":"","title":"Methods"},{"location":"reference/cassandra-table/#get_columns","text":"Filter list of columns by list of names and/or alias, working as a white list. If names is None and alias is None , all columns are returned. Parameters: names List[str] (Default: None ) : List of names. alias List[str] (Default: None ) : List of alias. Return: List [ primeight . CassandraColumn ]","title":"get_columns"},{"location":"reference/cassandra-table/#get","text":"Get column by name. If there is no column with the specified name, None is returned. Parameters: name str [Required] : Column name. Return: Optional [ CassandraColumn ]","title":"get"},{"location":"reference/cassandra-table/#has_split","text":"Whether a table has a temporal split or not. Return: bool","title":"has_split"},{"location":"reference/cassandra-table/#create","text":"Build table CREATE statement(s). Note The statement is only executed using the execute methods (e.g CassandraTable . execute ). Parameters: keyspace str or List[str] (Default: None ) : Keyspace name(s). If a List [ str ] is passed it will create multiple statements, one for each name. If set to None , CassandraMaterializedView . keyspace is used instead. gc_grace_seconds int (Default: 86400 ) : Grace period in seconds. Time to wait before garbage collecting tombstones (deletion markers). if_not_exists bool (Default: False ) : If True adds IF NOT EXISTS option to the statement(s). Attempting to create an already existing materialized view will return an error unless the IF NOT EXISTS option is used. If it is used, the statement will be a no-op if the materialized view already exists. create_materialized_views bool (Default: True ) : Whether to create the materialized view CREATE statement(s) after the table statement(s). Return: self","title":"create"},{"location":"reference/cassandra-table/#drop","text":"Build table DROP statement(s). Note The statement is only executed using the execute methods (e.g CassandraTable . execute ). Parameters: keyspace str or List[str] (Default: None ) : Keyspace name(s). If a List [ str ] is passed it will create multiple statements, one for each name. If set to None , CassandraMaterializedView . keyspace is used instead. if_exists bool (Default: False ) : If True adds IF EXISTS option to the statement(s). If the materialized view(s) do not exist, the statement will return an error, unless IF EXISTS is used in which case the operation is a no-op. drop_materialized_views bool (Default: True ) : Whether to create the materialized view DROP statement(s) before the table statement(s). Return: self","title":"drop"},{"location":"reference/cassandra-table/#insert","text":"Build table INSERT statement. When Cassandra does an insert and the row already exists, it overwrites the current column values. Also, for Cassandra, None row values are considered as empty, meaning that if you overwrite a column with a None value it will delete that row column. This means that you need to be careful whenever making inserts, so that you do not delete any undesired columns. Note The statement is only executed using the execute methods (e.g CassandraTable . execute ). Parameters: row Dict [ str , Any ] [Required] : Row. keyspace str or List[str] (Default: None ) : Keyspace name(s). If a List [ str ] is passed it will create multiple statements, one for each name. If set to None , CassandraMaterializedView . keyspace is used instead. ttl bool (Default: False ) : Specifies an optional Time To Live in seconds for the inserted values. If set, the inserted values are automatically removed from the database after the specified time. Note that the TTL concerns the inserted values, not the columns themselves. This means that any subsequent update of the column will also reset the TTL (to whatever TTL is specified in that update). By default, values never expire. A TTL of 0 is equivalent to no TTL. If the table has a default_time_to_live, a TTL of 0 will remove the TTL for the inserted or updated values. A TTL of null is equivalent to inserting with a TTL of 0. Return: self","title":"insert"},{"location":"reference/cassandra-table/#query","text":"Build table or materialized view SELECT statement(s), depending on the query name selected. This method can be chained with the methods required to define restrictions, and ending with the CassandraTable.execute method. Note The statement is only executed using the execute methods (e.g CassandraTable . execute ). Parameters: name str (Default: 'base' ) : Query name. keyspace str or List [ str ] (Default: None ) : Keyspace name(s). If a List [ str ] is passed it will create multiple statements, one for each name. If set to None , CassandraTable . keyspace is used instead. Return: self","title":"query"},{"location":"reference/cassandra-table/#select","text":"Filter columns of SELECT statement(s), works as a white list. If not called, all columns will be returned. This method must be chained after the CassandraTable . query method. Note The statement is only executed using the execute methods (e.g CassandraTable . execute ). Parameters: columns List [ str ] (Default: 'base' ) : List of column names. Return: self","title":"select"},{"location":"reference/cassandra-table/#time","text":"Complement SELECT statement(s), with time information. This method complements the table split and , if split_only is False , adds the where clause for the time column specified in the table configuration. This method must be chained after the CassandraTable . query method. Note The statement is only executed using the execute methods (e.g CassandraTable . execute ). Parameters: start datetime . datetime [Required] : Start date. end datetime . datetime [Required] : End date. prepare bool (Default: False ) : Whether to create statement ready to be a prepared statement. If set to True , will only define table split and will leave the required key as a prepared statement parameter. split_only bool (Default: False ) : Whether to only complement the table split as specified in the table configuration. Return: self","title":"time"},{"location":"reference/cassandra-table/#space","text":"Complement SELECT statement(s), with space information. This method adds the where clause for the space column specified in the table configuration. This method must be chained after the CassandraTable . query method. Note The statement is only executed using the execute methods (e.g CassandraTable . execute ). Parameters: identifier str or List [ str ] (Default: None ) : Space identifier or list of identifiers. If set to None , will leave the required key as a prepared statement parameter. Return: self","title":"space"},{"location":"reference/cassandra-table/#id","text":"Complement SELECT statement(s), with identifier information. This method adds the where clause for the id column specified in the table configuration. This method must be chained after the CassandraTable . query method. Note The statement is only executed using the execute methods (e.g CassandraTable . execute ). Parameters: identifier str or List [ str ] (Default: None ) : Identifier or list of identifiers. If set to None , will leave the required key as a prepared statement parameter. Return: self","title":"id"},{"location":"reference/cassandra-table/#equals","text":"Complement SELECT statement(s), with an equality where clause. This method must be chained after the CassandraTable . query method. Note The statement is only executed using the execute methods (e.g CassandraTable . execute ). Parameters: column str [Required] : Column name. value Any (Default: None ) : Value. If set to None , will leave the column as a prepared statement parameter. Return: self","title":"equals"},{"location":"reference/cassandra-table/#among","text":"Complement SELECT statement(s), with an IN where clause. This method must be chained after the CassandraTable . query method. Note The statement is only executed using the execute methods (e.g CassandraTable . execute ). Parameters: column str [Required] : Column name. value List [ Any ] (Default: None ) : List of values. If set to None , will leave the column as a prepared statement parameter. Return: self","title":"among"},{"location":"reference/cassandra-table/#between","text":"Complement SELECT statement(s), with a range where clause. This method must be chained after the CassandraTable . query method. Note The statement is only executed using the execute methods (e.g CassandraTable . execute ). Parameters: column str [Required] : Column name. lower Any (Default: None ) : Lower value. If set to None , will leave the column as a prepared statement parameter. higher Any (Default: None ) : Higher value. If set to None , will leave the column as a prepared statement parameter. Return: self","title":"between"},{"location":"reference/cassandra-table/#between_including","text":"Complement SELECT statement(s), with an inclusive range where clause. This method must be chained after the CassandraTable . query method. Note The statement is only executed using the execute methods (e.g CassandraTable . execute ). Parameters: column str [Required] : Column name. lower Any (Default: None ) : Lower value. If set to None , will leave the column as a prepared statement parameter. higher Any (Default: None ) : Higher value. If set to None , will leave the column as a prepared statement parameter. Return: self","title":"between_including"},{"location":"reference/cassandra-table/#lower_than","text":"Complement SELECT statement(s), with a lower than inequality where clause. This method must be chained after the CassandraTable . query method. Note The statement is only executed using the execute methods (e.g CassandraTable . execute ). Parameters: column str [Required] : Column name. boundary Any (Default: None ) : Value. If set to None , will leave the column as a prepared statement parameter. Return: self","title":"lower_than"},{"location":"reference/cassandra-table/#lower_or_equal_than","text":"Complement SELECT statement(s), with a lower or equal than inequality where clause. This method must be chained after the CassandraTable . query method. Note The statement is only executed using the execute methods (e.g CassandraTable . execute ). Parameters: column str [Required] : Column name. boundary Any (Default: None ) : Value. If set to None , will leave the column as a prepared statement parameter. Return: self","title":"lower_or_equal_than"},{"location":"reference/cassandra-table/#higher_than","text":"Complement SELECT statement(s), with a higher than inequality where clause. This method must be chained after the CassandraTable . query method. Note The statement is only executed using the execute methods (e.g CassandraTable . execute ). Parameters: column str [Required] : Column name. boundary Any (Default: None ) : Value. If set to None , will leave the column as a prepared statement parameter. Return: self","title":"higher_than"},{"location":"reference/cassandra-table/#higher_or_equal_than","text":"Complement SELECT statement(s), with a higher or equal than inequality where clause. This method must be chained after the CassandraTable . query method. Note The statement is only executed using the execute methods (e.g CassandraTable . execute ). Parameters: column str [Required] : Column name. boundary Any (Default: None ) : Value. If set to None , will leave the column as a prepared statement parameter. Return: self","title":"higher_or_equal_than"},{"location":"reference/cassandra-table/#limit","text":"Complement SELECT statement(s), with a LIMIT clause. The LIMIT option to a SELECT statement limits the number of rows returned by a query. This method must be chained after the CassandraTable . query method. Note The statement is only executed using the execute methods (e.g CassandraTable . execute ). Parameters: value int [Required] : Limiting value. Return: self","title":"limit"},{"location":"reference/parser/yaml-parser/","text":"YamlParser \u00b6 The YamlParser manages all the interactions with Cassandra. Import \u00b6 from primeight.parser import YamlParser Methods \u00b6 parse \u00b6 Read and parse the contents of a Yaml file. This method also validates that the Yaml file has the correct format. Parameters: path str or pathlib.Path [Required] : path to the Yaml configuration. Return: Dict","title":"YamlParser"},{"location":"reference/parser/yaml-parser/#yamlparser","text":"The YamlParser manages all the interactions with Cassandra.","title":"YamlParser"},{"location":"reference/parser/yaml-parser/#import","text":"from primeight.parser import YamlParser","title":"Import"},{"location":"reference/parser/yaml-parser/#methods","text":"","title":"Methods"},{"location":"reference/parser/yaml-parser/#parse","text":"Read and parse the contents of a Yaml file. This method also validates that the Yaml file has the correct format. Parameters: path str or pathlib.Path [Required] : path to the Yaml configuration. Return: Dict","title":"parse"},{"location":"user-guide/first-steps/","text":"First Steps \u00b6 Basic usage \u00b6 Connecting to the cluster \u00b6 The CassandraManager is responsible for managing the connection to the Cassandra cluster and executing all your actions. The first step is to create an instance and connect to the cluster. from primeight import CassandraManager cassandra_seed = [ \"127.0.0.1\" ] manager = CassandraManager ( cassandra_seed ) manager . connect () Loading table configuration \u00b6 Next, you need to load the configuration of the table that you wish to operate over. from primeight.parser import YamlParser parser = YamlParser ( 'devices.yaml' ) config = parser . load () Create the Table object \u00b6 Finally, you are ready to create the Table object and make queries. for primeight import CassandraTable table = CassandraTable ( config , cassandra_manager = manager ) table = \\ table \\ . query ( 'base' ) \\ . select ([ 'device_id' ]) The execute order \u00b6 primeight does not take any actions unless when explicitly told so. To make sure no undesired results happen, statements are only executed when an execute method is called. And if you want to examine the statements before execute, the statement list is available through the statements attribute. print ( table . statements ) rows = table . execute () Recap \u00b6 Putting it all together: from primeight import CassandraManager , CassandraTable from primeight.parser import YamlParser cassandra_seed = [ \"127.0.0.1\" ] manager = CassandraManager ( cassandra_seed ) manager . connect () parser = YamlParser ( 'devices.yaml' ) config = parser . load () table = CassandraTable ( config , cassandra_manager = manager ) table = \\ table \\ . query ( 'base' ) \\ . select ([ 'device_id' ]) print ( table . statements ) rows = table . execute ()","title":"First Steps"},{"location":"user-guide/first-steps/#first-steps","text":"","title":"First Steps"},{"location":"user-guide/first-steps/#basic-usage","text":"","title":"Basic usage"},{"location":"user-guide/first-steps/#connecting-to-the-cluster","text":"The CassandraManager is responsible for managing the connection to the Cassandra cluster and executing all your actions. The first step is to create an instance and connect to the cluster. from primeight import CassandraManager cassandra_seed = [ \"127.0.0.1\" ] manager = CassandraManager ( cassandra_seed ) manager . connect ()","title":"Connecting to the cluster"},{"location":"user-guide/first-steps/#loading-table-configuration","text":"Next, you need to load the configuration of the table that you wish to operate over. from primeight.parser import YamlParser parser = YamlParser ( 'devices.yaml' ) config = parser . load ()","title":"Loading table configuration"},{"location":"user-guide/first-steps/#create-the-table-object","text":"Finally, you are ready to create the Table object and make queries. for primeight import CassandraTable table = CassandraTable ( config , cassandra_manager = manager ) table = \\ table \\ . query ( 'base' ) \\ . select ([ 'device_id' ])","title":"Create the Table object"},{"location":"user-guide/first-steps/#the-execute-order","text":"primeight does not take any actions unless when explicitly told so. To make sure no undesired results happen, statements are only executed when an execute method is called. And if you want to examine the statements before execute, the statement list is available through the statements attribute. print ( table . statements ) rows = table . execute ()","title":"The execute order"},{"location":"user-guide/first-steps/#recap","text":"Putting it all together: from primeight import CassandraManager , CassandraTable from primeight.parser import YamlParser cassandra_seed = [ \"127.0.0.1\" ] manager = CassandraManager ( cassandra_seed ) manager . connect () parser = YamlParser ( 'devices.yaml' ) config = parser . load () table = CassandraTable ( config , cassandra_manager = manager ) table = \\ table \\ . query ( 'base' ) \\ . select ([ 'device_id' ]) print ( table . statements ) rows = table . execute ()","title":"Recap"},{"location":"user-guide/indexing-geospacial-data/","text":"Indexing Geo-spatial data \u00b6 Cassandra is not famous for his handling of geospatial data, it is sometimes hard to query geospatial data in Cassandra. To make this easy, primeight makes use of Uber's H3 Spatial Index to partition data and make it easier to query. This Hexagonal Hierarchical Spatial Index translates real world latitude and longitude pairs to a 64-bit H3 index, identifying a grid cell. Since this index is hierarchical, the resolution can go from 0 to 15, 0 being coarsest and 15 being finest. You can read more about Uber's H3 Spatial index here .","title":"Indexing Geo-spacial Data"},{"location":"user-guide/indexing-geospacial-data/#indexing-geo-spatial-data","text":"Cassandra is not famous for his handling of geospatial data, it is sometimes hard to query geospatial data in Cassandra. To make this easy, primeight makes use of Uber's H3 Spatial Index to partition data and make it easier to query. This Hexagonal Hierarchical Spatial Index translates real world latitude and longitude pairs to a 64-bit H3 index, identifying a grid cell. Since this index is hierarchical, the resolution can go from 0 to 15, 0 being coarsest and 15 being finest. You can read more about Uber's H3 Spatial index here .","title":"Indexing Geo-spatial data"},{"location":"user-guide/insert-data/","text":"Insert data \u00b6 Inserting data to Cassandra can seem tricky some times. primeight tries to abstract it the most and make it the easiest experience possible. Because each row is identified by their Primary Keys, specified in the table configuration file by the required and optional columns of the base query, those keys are required when making inserts. Generated Columns \u00b6 When inserting rows into Cassandra using primeight , it automatically generates the generated_columns for you, so that you only need introduce the columns you desire. For instance, using the devices.yaml configuration file. version : '1.0' name : 'devices' keyspace : 'meight' columns : device_id : type : uuid ts : type : timestamp generated_columns : day : ts query : base : required : id : device_id optional : - day order : id : asc day : desc When inserting rows using primeight , the final row will look like this: ... table . insert ({ 'device_id' : '659b6222-19fb-416e-9aa5-9df8cf679247' , 'ts' : 1592575324304 }) . execute () # Actual insert: {'device_id': '659b6222-19fb-416e-9aa5-9df8cf679247', 'ts': 1592575324304, 'day': 1592524800000} Updating rows \u00b6 One important note is that, in contrast to SQL, Cassandra does not check if a row exists prior to the insert, and as such it updates it if it already exists. It is, however, possible to avoid this behaviour by setting the insert method parameter if_not_exists to True . table . insert ({ 'device_id' : '659b6222-19fb-416e-9aa5-9df8cf679247' , 'ts' : 1592575324304 }, if_not_exists = True ) Keep in mind though that this incurs in a performance cost on insert. Deleting column value \u00b6 Cassandra has no concept for None values, meaning None values (or NULL values in Cassandra) are considered as \"empty\" values. As such, whenever updating a row with None values, will cause those values to be deleted. This can be really usefull, but has also some dangers attached, so you must be very cautious when inserting data, to make sure you are not accidentally deleting any columns.","title":"Insert Data"},{"location":"user-guide/insert-data/#insert-data","text":"Inserting data to Cassandra can seem tricky some times. primeight tries to abstract it the most and make it the easiest experience possible. Because each row is identified by their Primary Keys, specified in the table configuration file by the required and optional columns of the base query, those keys are required when making inserts.","title":"Insert data"},{"location":"user-guide/insert-data/#generated-columns","text":"When inserting rows into Cassandra using primeight , it automatically generates the generated_columns for you, so that you only need introduce the columns you desire. For instance, using the devices.yaml configuration file. version : '1.0' name : 'devices' keyspace : 'meight' columns : device_id : type : uuid ts : type : timestamp generated_columns : day : ts query : base : required : id : device_id optional : - day order : id : asc day : desc When inserting rows using primeight , the final row will look like this: ... table . insert ({ 'device_id' : '659b6222-19fb-416e-9aa5-9df8cf679247' , 'ts' : 1592575324304 }) . execute () # Actual insert: {'device_id': '659b6222-19fb-416e-9aa5-9df8cf679247', 'ts': 1592575324304, 'day': 1592524800000}","title":"Generated Columns"},{"location":"user-guide/insert-data/#updating-rows","text":"One important note is that, in contrast to SQL, Cassandra does not check if a row exists prior to the insert, and as such it updates it if it already exists. It is, however, possible to avoid this behaviour by setting the insert method parameter if_not_exists to True . table . insert ({ 'device_id' : '659b6222-19fb-416e-9aa5-9df8cf679247' , 'ts' : 1592575324304 }, if_not_exists = True ) Keep in mind though that this incurs in a performance cost on insert.","title":"Updating rows"},{"location":"user-guide/insert-data/#deleting-column-value","text":"Cassandra has no concept for None values, meaning None values (or NULL values in Cassandra) are considered as \"empty\" values. As such, whenever updating a row with None values, will cause those values to be deleted. This can be really usefull, but has also some dangers attached, so you must be very cautious when inserting data, to make sure you are not accidentally deleting any columns.","title":"Deleting column value"},{"location":"user-guide/manage-keyspaces/","text":"Managing Keyspaces \u00b6 primeight allows for some management tasks of Cassandra keyspaces, namely, the creation , alter and drop of keyspaces. primeight tries to make these tasks the easiest experience possible. Keyspace names \u00b6 primeight allows for both static or dynamic keyspace names. The first are specified in the table configuration, while the latter are overwritten in an action by action manner. The dynamic names allow for a more costumizable table configuration, enabling, for instance, to have a keyspace per client. Creating keyspaces \u00b6 from primeight import CassandraManager , CassandraKeyspace from primeight.parser import YamlParser config = YamlParser . parse ( \"devices.yaml\" ) manager = CassandraManager ([ \"127.0.0.1\" ]) manager . connect () keyspace = CassandraKeyspace ( config , cassandra_manager = manager ) keyspace . create () . execute () or using a dynamic keyspace name : from primeight import CassandraManager , CassandraKeyspace from primeight.parser import YamlParser config = YamlParser . parse ( \"devices.yaml\" ) manager = CassandraManager ([ \"127.0.0.1\" ]) manager . connect () keyspace = CassandraKeyspace ( config , cassandra_manager = manager ) client_name = \"Client ABC\" keyspace . create ( name = client_name . replace ( ' ' , '' )) . execute () You can read more on the parameters of the create method here . Altering keyspaces \u00b6 from primeight import CassandraManager , CassandraKeyspace from primeight.parser import YamlParser config = YamlParser . parse ( \"devices.yaml\" ) manager = CassandraManager ([ \"127.0.0.1\" ]) manager . connect () keyspace = CassandraKeyspace ( config , cassandra_manager = manager ) keyspace . alter ( replication_strategy = \"SimpleStrategy\" , replication_factor = 3 ) . execute () You can read more on the parameters of the alter method here . Dropping keyspaces \u00b6 primeight tries to make the creation of keyspaces the easiest experience possible. from primeight import CassandraManager , CassandraKeyspace from primeight.parser import YamlParser config = YamlParser . parse ( \"devices.yaml\" ) manager = CassandraManager ([ \"127.0.0.1\" ]) manager . connect () keyspace = CassandraKeyspace ( config , cassandra_manager = manager ) keyspace . drop () . execute () You can read more on the parameters of the drop method here .","title":"Managing Keyspaces"},{"location":"user-guide/manage-keyspaces/#managing-keyspaces","text":"primeight allows for some management tasks of Cassandra keyspaces, namely, the creation , alter and drop of keyspaces. primeight tries to make these tasks the easiest experience possible.","title":"Managing Keyspaces"},{"location":"user-guide/manage-keyspaces/#keyspace-names","text":"primeight allows for both static or dynamic keyspace names. The first are specified in the table configuration, while the latter are overwritten in an action by action manner. The dynamic names allow for a more costumizable table configuration, enabling, for instance, to have a keyspace per client.","title":"Keyspace names"},{"location":"user-guide/manage-keyspaces/#creating-keyspaces","text":"from primeight import CassandraManager , CassandraKeyspace from primeight.parser import YamlParser config = YamlParser . parse ( \"devices.yaml\" ) manager = CassandraManager ([ \"127.0.0.1\" ]) manager . connect () keyspace = CassandraKeyspace ( config , cassandra_manager = manager ) keyspace . create () . execute () or using a dynamic keyspace name : from primeight import CassandraManager , CassandraKeyspace from primeight.parser import YamlParser config = YamlParser . parse ( \"devices.yaml\" ) manager = CassandraManager ([ \"127.0.0.1\" ]) manager . connect () keyspace = CassandraKeyspace ( config , cassandra_manager = manager ) client_name = \"Client ABC\" keyspace . create ( name = client_name . replace ( ' ' , '' )) . execute () You can read more on the parameters of the create method here .","title":"Creating keyspaces"},{"location":"user-guide/manage-keyspaces/#altering-keyspaces","text":"from primeight import CassandraManager , CassandraKeyspace from primeight.parser import YamlParser config = YamlParser . parse ( \"devices.yaml\" ) manager = CassandraManager ([ \"127.0.0.1\" ]) manager . connect () keyspace = CassandraKeyspace ( config , cassandra_manager = manager ) keyspace . alter ( replication_strategy = \"SimpleStrategy\" , replication_factor = 3 ) . execute () You can read more on the parameters of the alter method here .","title":"Altering keyspaces"},{"location":"user-guide/manage-keyspaces/#dropping-keyspaces","text":"primeight tries to make the creation of keyspaces the easiest experience possible. from primeight import CassandraManager , CassandraKeyspace from primeight.parser import YamlParser config = YamlParser . parse ( \"devices.yaml\" ) manager = CassandraManager ([ \"127.0.0.1\" ]) manager . connect () keyspace = CassandraKeyspace ( config , cassandra_manager = manager ) keyspace . drop () . execute () You can read more on the parameters of the drop method here .","title":"Dropping keyspaces"},{"location":"user-guide/manage-materialized-views/","text":"Managing Materialized Views \u00b6 Warning Materialized Views are experimental and are not recommended for production use. primeight allows the management of Cassandra materialized views, namely, the creation and drop of materialized views. primeight tries to make these tasks the easiest experience possible. Creating materialized views \u00b6 from primeight import CassandraManager , CassandraMaterializedView from primeight.parser import YamlParser config = YamlParser . parse ( \"devices.yaml\" ) manager = CassandraManager ([ \"127.0.0.1\" ]) manager . connect () view = CassandraMaterializedView ( config , 'devices_by_time' , cassandra_manager = manager ) view . create () . execute () or using a dynamic keyspace name : from primeight import CassandraManager , CassandraMaterializedView from primeight.parser import YamlParser config = YamlParser . parse ( \"devices.yaml\" ) manager = CassandraManager ([ \"127.0.0.1\" ]) manager . connect () view = CassandraMaterializedView ( config , 'devices_by_time' , cassandra_manager = manager ) client_name = \"Client ABC\" view . create ( keyspace = client_name . replace ( ' ' , '-' )) . execute () You can read more on the parameters of the create method here . Dropping materialized views \u00b6 primeight tries to make the creation of materialized views the easiest experience possible. from primeight import CassandraManager , CassandraMaterializedView from primeight.parser import YamlParser config = YamlParser . parse ( \"devices.yaml\" ) manager = CassandraManager ([ \"127.0.0.1\" ]) manager . connect () view = CassandraMaterializedView ( config , 'devices_by_time' , cassandra_manager = manager ) view . drop () . execute () You can read more on the parameters of the drop method here .","title":"Managing Materialized Views"},{"location":"user-guide/manage-materialized-views/#managing-materialized-views","text":"Warning Materialized Views are experimental and are not recommended for production use. primeight allows the management of Cassandra materialized views, namely, the creation and drop of materialized views. primeight tries to make these tasks the easiest experience possible.","title":"Managing Materialized Views"},{"location":"user-guide/manage-materialized-views/#creating-materialized-views","text":"from primeight import CassandraManager , CassandraMaterializedView from primeight.parser import YamlParser config = YamlParser . parse ( \"devices.yaml\" ) manager = CassandraManager ([ \"127.0.0.1\" ]) manager . connect () view = CassandraMaterializedView ( config , 'devices_by_time' , cassandra_manager = manager ) view . create () . execute () or using a dynamic keyspace name : from primeight import CassandraManager , CassandraMaterializedView from primeight.parser import YamlParser config = YamlParser . parse ( \"devices.yaml\" ) manager = CassandraManager ([ \"127.0.0.1\" ]) manager . connect () view = CassandraMaterializedView ( config , 'devices_by_time' , cassandra_manager = manager ) client_name = \"Client ABC\" view . create ( keyspace = client_name . replace ( ' ' , '-' )) . execute () You can read more on the parameters of the create method here .","title":"Creating materialized views"},{"location":"user-guide/manage-materialized-views/#dropping-materialized-views","text":"primeight tries to make the creation of materialized views the easiest experience possible. from primeight import CassandraManager , CassandraMaterializedView from primeight.parser import YamlParser config = YamlParser . parse ( \"devices.yaml\" ) manager = CassandraManager ([ \"127.0.0.1\" ]) manager . connect () view = CassandraMaterializedView ( config , 'devices_by_time' , cassandra_manager = manager ) view . drop () . execute () You can read more on the parameters of the drop method here .","title":"Dropping materialized views"},{"location":"user-guide/manage-tables/","text":"Managing Tables \u00b6 primeight allows the management of Cassandra tables, namely, the creation and drop of tables. primeight tries to make these tasks the easiest experience possible. Creating tables \u00b6 from primeight import CassandraManager , CassandraTable from primeight.parser import YamlParser config = YamlParser . parse ( \"devices.yaml\" ) manager = CassandraManager ([ \"127.0.0.1\" ]) manager . connect () table = CassandraTable ( config , cassandra_manager = manager ) table . create () . execute () or using a dynamic keyspace name : from primeight import CassandraManager , CassandraTable from primeight.parser import YamlParser config = YamlParser . parse ( \"devices.yaml\" ) manager = CassandraManager ([ \"127.0.0.1\" ]) manager . connect () table = CassandraTable ( config , cassandra_manager = manager ) client_name = \"Client ABC\" table . create ( keyspace = client_name . replace ( ' ' , '-' )) . execute () You can read more on the parameters of the create method here . Dropping tables \u00b6 primeight tries to make the creation of tables the easiest experience possible. Warning You cannot drop a table without first dropping all of its materialized views. For that reason the drop method includes a drop_materialized_views parameter that allows you to drop everything at once. from primeight import CassandraManager , CassandraTable from primeight.parser import YamlParser config = YamlParser . parse ( \"devices.yaml\" ) manager = CassandraManager ([ \"127.0.0.1\" ]) manager . connect () table = CassandraTable ( config , cassandra_manager = manager ) table . drop () . execute () You can read more on the parameters of the drop method here .","title":"Managing Tables"},{"location":"user-guide/manage-tables/#managing-tables","text":"primeight allows the management of Cassandra tables, namely, the creation and drop of tables. primeight tries to make these tasks the easiest experience possible.","title":"Managing Tables"},{"location":"user-guide/manage-tables/#creating-tables","text":"from primeight import CassandraManager , CassandraTable from primeight.parser import YamlParser config = YamlParser . parse ( \"devices.yaml\" ) manager = CassandraManager ([ \"127.0.0.1\" ]) manager . connect () table = CassandraTable ( config , cassandra_manager = manager ) table . create () . execute () or using a dynamic keyspace name : from primeight import CassandraManager , CassandraTable from primeight.parser import YamlParser config = YamlParser . parse ( \"devices.yaml\" ) manager = CassandraManager ([ \"127.0.0.1\" ]) manager . connect () table = CassandraTable ( config , cassandra_manager = manager ) client_name = \"Client ABC\" table . create ( keyspace = client_name . replace ( ' ' , '-' )) . execute () You can read more on the parameters of the create method here .","title":"Creating tables"},{"location":"user-guide/manage-tables/#dropping-tables","text":"primeight tries to make the creation of tables the easiest experience possible. Warning You cannot drop a table without first dropping all of its materialized views. For that reason the drop method includes a drop_materialized_views parameter that allows you to drop everything at once. from primeight import CassandraManager , CassandraTable from primeight.parser import YamlParser config = YamlParser . parse ( \"devices.yaml\" ) manager = CassandraManager ([ \"127.0.0.1\" ]) manager . connect () table = CassandraTable ( config , cassandra_manager = manager ) table . drop () . execute () You can read more on the parameters of the drop method here .","title":"Dropping tables"},{"location":"user-guide/python-typing/","text":"Python Typing \u00b6 Since Python 3.6 , Python included support for type hints. This enables editors and tools to help you be more proeficient when coding. primeight also allows this by incorporating methods that allow you to dynamically generate models for your tables and types for columns. Table model \u00b6 Using the model attribute of the CassandraTable or CassandraMaterializedView , you have access to a Pydantic model of your table. from primeight import CassandraTable from primeight.parser import YamlParser config = YamlParser . parse ( 'devices.yaml' ) table = CassandraTable ( config ) table . model Column type \u00b6 Using the pydantic_type attribute of the CassandraColumn , you have access to type of your column. from primeight import CassandraTable from primeight.parser import YamlParser config = YamlParser . parse ( 'clients.yaml' ) table = CassandraTable ( config ) table . col [ 'device_id' ] . pydantic_type","title":"Python Typing"},{"location":"user-guide/python-typing/#python-typing","text":"Since Python 3.6 , Python included support for type hints. This enables editors and tools to help you be more proeficient when coding. primeight also allows this by incorporating methods that allow you to dynamically generate models for your tables and types for columns.","title":"Python Typing"},{"location":"user-guide/python-typing/#table-model","text":"Using the model attribute of the CassandraTable or CassandraMaterializedView , you have access to a Pydantic model of your table. from primeight import CassandraTable from primeight.parser import YamlParser config = YamlParser . parse ( 'devices.yaml' ) table = CassandraTable ( config ) table . model","title":"Table model"},{"location":"user-guide/python-typing/#column-type","text":"Using the pydantic_type attribute of the CassandraColumn , you have access to type of your column. from primeight import CassandraTable from primeight.parser import YamlParser config = YamlParser . parse ( 'clients.yaml' ) table = CassandraTable ( config ) table . col [ 'device_id' ] . pydantic_type","title":"Column type"},{"location":"user-guide/query-cassandra/","text":"Query Cassandra \u00b6 primeight is designed to abstract the querying language used by Cassandra and to ease the creation of queries programmatically. It implements a set of methods that can be chained to construct queries (these methods return self ). Methods \u00b6 id time space equals among between between_including lower_than lower_or_equal_than higher_than higher_or_equal_than Required Columns \u00b6 The id , time , and space methods identify the required attributes of the query. When a query have more that one required column, you can not only specify one of them, you need to specify all. Example \u00b6 from primeight.parser import YamlParser from primeight import CassandraManager , CassandraKeyspace , CassandraTable # Load configuration. config = YamlParser . parse ( 'devices.yaml' ) # Connect to Cassandra cluster. manager = CassandraManager ([ '127.0.0.1' ]) manager . connect () # Create Keyspace and table. keyspace = CassandraKeyspace ( config , cassandra_manager = manager ) table = CassandraTable ( config , cassandra_manager = manager ) # Query table. rows = \\ table \\ . query ( 'base' ) \\ . id ( '659b6222-19fb-416e-9aa5-9df8cf679247' ) \\ . execute () n_rows = len ( rows ) print ( f \"Queried { len ( rows ) } rows\" )","title":"Query Cassandra"},{"location":"user-guide/query-cassandra/#query-cassandra","text":"primeight is designed to abstract the querying language used by Cassandra and to ease the creation of queries programmatically. It implements a set of methods that can be chained to construct queries (these methods return self ).","title":"Query Cassandra"},{"location":"user-guide/query-cassandra/#methods","text":"id time space equals among between between_including lower_than lower_or_equal_than higher_than higher_or_equal_than","title":"Methods"},{"location":"user-guide/query-cassandra/#required-columns","text":"The id , time , and space methods identify the required attributes of the query. When a query have more that one required column, you can not only specify one of them, you need to specify all.","title":"Required Columns"},{"location":"user-guide/query-cassandra/#example","text":"from primeight.parser import YamlParser from primeight import CassandraManager , CassandraKeyspace , CassandraTable # Load configuration. config = YamlParser . parse ( 'devices.yaml' ) # Connect to Cassandra cluster. manager = CassandraManager ([ '127.0.0.1' ]) manager . connect () # Create Keyspace and table. keyspace = CassandraKeyspace ( config , cassandra_manager = manager ) table = CassandraTable ( config , cassandra_manager = manager ) # Query table. rows = \\ table \\ . query ( 'base' ) \\ . id ( '659b6222-19fb-416e-9aa5-9df8cf679247' ) \\ . execute () n_rows = len ( rows ) print ( f \"Queried { len ( rows ) } rows\" )","title":"Example"}]}